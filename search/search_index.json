{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pagina Creado Con MKDOCS Para Lenguaje Romeo Dominguez Bocagrea","title":"Pagina Creado Con MKDOCS Para Lenguaje"},{"location":"#pagina-creado-con-mkdocs-para-lenguaje","text":"Romeo Dominguez Bocagrea","title":"Pagina Creado Con MKDOCS Para Lenguaje"},{"location":"cdv/","text":"Ademas de Git, \u00bfque otros sistemas de control de versiones existen? CVS, Subversion, SourceSafe, ClearCase, Darcs, Bazaar, Plastic SCM, Git, SCCS, Mercurial, Perforce, Fossil SCM, Team Foundation Server. En Git, \u00bfqu\u00e9 tres \u00e1reas existen? Git Directory Working Directory Staging Area Busca en Internet un buen tutorial de GIT y real\u00edzalo. \u00bfDe qu\u00e9 tutorial se trata? Curso acelerado de Git y GitHub para principiantes (https://www.youtube.com/watch?v=SWYqp7iY_Tc) En el tutorial se ve todos los comandos basicos y mas importantes de Git y GitHUb Visualiza el siguiente video y responde a las cuestiones que aparecen m\u00e1s abajo. https://www.youtube.com/watch?v=uR6G2v_WsRA En Git, \u00bfpara qu\u00e9 sirve el comando git config ? Para definir valores de configuraci\u00f3n de Git a nivel de un proyecto global o local. En Git, \u00bfpara qu\u00e9 sirve el comando git init ? Crea un nuevo repositorio de Git En Git, \u00bfpara qu\u00e9 sirve el comando git clone ? Para apuntar a un repositorio existente y clonar o copiar dicho repositorio en un nuevo directorio, en otra ubicaci\u00f3n. En Git, \u00bfpara qu\u00e9 sirve el comando git status ? Muestra el estado del directorio de trabajo y del \u00e1rea del entorno de ensayo En Git, \u00bfpara qu\u00e9 sirve el comando git add ? A\u00f1ade un cambio del directorio de trabajo en el entorno de ensayo En Git, \u00bfpara qu\u00e9 sirve el comando git commit ? Para confirmar una instant\u00e1nea del directorio del entorno de ensayo en el historial de confirmaciones de los repositorios. En Git, \u00bfpara qu\u00e9 sirve el comando git log ? Para explorar el historial del repositorio En Git, \u00bfpara qu\u00e9 sirve el comando git reset HEAD nombrearchivo ? Es un comando potente que sirve para deshacer los cambios locales en el estado de un repositorio de Git En Git, \u00bfpara qu\u00e9 sirve el comando git checkout -- nombrearchivo ? Sirve para deshacer los ultimos cambios sobre el proyecto o sobre un archivo en concreto desde que se hizo el \u00faltimo cambio. Visualiza el siguiente video y responde a las cuestiones que aparecen m\u00e1s abajo. https://www.youtube.com/watch?v=FyAAIHHClqI En Git, \u00bfpara qu\u00e9 sirve el comando git branch ? Te permite crear, enumerar y eliminar ramas, as\u00ed como cambiar su nombre. En Git, \u00bfpara qu\u00e9 sirve el comando git checkout ? Te permite desplazarte entre las ramas creadas por git branch En Git, \u00bfpara qu\u00e9 sirve el comando git merge ? Permite tomar las l\u00edneas independientes de desarrollo creadas por git branch e integrarlas en una sola rama. En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo fast-forward. Realizar fusiones de avance r\u00e1pido en las situaciones donde exista un proceso lineal desde el extremo de la rama actual y que se extienda hasta la rama de destino En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo 3-way. La fusi\u00f3n de 3-way se basa en 3 confirmaciones diferentes: El ancestro com\u00fan. La punta de la rama Master. La punta de la rama de funciones. Git identifica estas tres confirmaciones mediante instant\u00e1neas. Git compara el ancestro com\u00fan con cada una de las confirmaciones de punta.","title":"Control De Versiones"},{"location":"ddc/","text":"Diagramas de casos de uso Nombra y describe brevemente los elementos que se utilizan en un diagrama de casos de uso. Busca informaci\u00f3n si es necesario. Actores : es cualquier entidad que desempe\u00f1e un papel en un sistema determinado. Puede ser una persona, una organizaci\u00f3n o un sistema externo. L\u00edmites del sistema (sujeto) : refleja los l\u00edmites o alcances que abarca un determinado sistema. Se utiliza para reflejar diferentes \u00e1reas dentro del mismo. Casos de uso : se utiliza para representar una de las funcionalidades que realiza el sistema. Es una secuencia de acciones que hace el sistema y que producen un resultado que puede percibir un usuario. Relaciones : la interacci\u00f3n entre dos casos de uso o de un actor con un caso de uso se representa por medio de una relaci\u00f3n. Las principales relaciones son: Generalizaci\u00f3n (Generalization), Inclusi\u00f3n (Include) y Extensi\u00f3n (Extends). Por cada ejemplo de diagrama de casos de uso que aparece en las diapositivas, realiza su interpretaci\u00f3n. Escribe la descripci\u00f3n con tus palabras. Diagramas de secuencia Nombra y describe brevemente los elementos que se utilizan en un diagrama de secuencia. Busca informaci\u00f3n si es necesario. Objetos : son bloques de construcci\u00f3n b\u00e1sicos de los diagramas UML y representan ciertas caracter\u00edsticas de un elemento del sistema, que var\u00edan dependiendo del diagrama. L\u00edneas de vida : son l\u00edneas discontinuas que sale del objeto y avanza en el tiempo desde arriba hacia abajo. Mensajes : es un elemento con nombre que define un tipo espec\u00edfico de comunicaci\u00f3n entre l\u00edneas de vida de una interacci\u00f3n. Ocurrencias de Ejecuci\u00f3n : periodo de tiempo durante el cual un objeto est\u00e1 en ejecuci\u00f3n . Ocurrencias de destrucci\u00f3n : momento en el cual un objeto es destruido .**** Por cada ejemplo de diagrama de secuencia que aparece en las diapositivas, realiza su interpretaci\u00f3n. Escribe la descripci\u00f3n con tus palabras. Diagramas de estados Nombra y describe brevemente los elementos que se utilizan en un diagrama de estados. Busca informaci\u00f3n si es necesario. Estado: Un estado representa una condici\u00f3n o situaci\u00f3n en la que se encuentra el sistema. Se representa mediante un rect\u00e1ngulo con esquinas redondeadas y se etiqueta con un nombre descriptivo. Transici\u00f3n: Una transici\u00f3n es una relaci\u00f3n que describe el cambio de un estado a otro en respuesta a un evento o acci\u00f3n. Se representa mediante una flecha dirigida desde el estado de origen al estado de destino y se etiqueta con una etiqueta que describe la acci\u00f3n que desencadena la transici\u00f3n. Evento: Un evento es una acci\u00f3n que desencadena una transici\u00f3n. Puede ser un est\u00edmulo externo o interno que causa un cambio en el sistema. Se representa mediante una etiqueta en la flecha que conecta los estados de origen y destino. Acci\u00f3n: Una acci\u00f3n es una actividad que se realiza cuando se produce una transici\u00f3n. Puede ser una acci\u00f3n interna del sistema o una acci\u00f3n que se realiza en respuesta a un evento externo. Se representa mediante una etiqueta en la flecha que conecta los estados de origen y destino. Punto de inicio y fin: El punto de inicio es el estado inicial del sistema, desde donde se inicia el diagrama de estados. Se representa mediante un peque\u00f1o c\u00edrculo conectado por una flecha al primer estado del sistema. El punto final es el estado final del sistema, donde termina el diagrama de estados. Se representa mediante un peque\u00f1o c\u00edrculo conectado por una flecha al \u00faltimo estado del sistema. Jerarqu\u00eda de estados: Los diagramas de estados tambi\u00e9n pueden tener una jerarqu\u00eda de estados, donde un estado puede tener subestados y transiciones internas. Se representan mediante una caja contenedora alrededor de los subestados y se etiquetan con el nombre del estado principal. Por cada ejemplo de diagrama de estados que aparece en las diapositivas, realiza su interpretaci\u00f3n. Escribe la descripci\u00f3n con tus palabras. Diagramas de actividades Nombra y describe brevemente los elementos que se utilizan en un diagrama de actividades. Busca informaci\u00f3n si es necesario. Actividad: Una actividad es una tarea que se realiza en el sistema y que contribuye al logro de un objetivo. Se representa mediante un rect\u00e1ngulo con esquinas redondeadas y se etiqueta con un nombre descriptivo. Acci\u00f3n: Una acci\u00f3n es una tarea at\u00f3mica que se realiza como parte de una actividad. Puede ser una acci\u00f3n interna del sistema o una acci\u00f3n que se realiza en respuesta a un evento externo. Se representa mediante un rect\u00e1ngulo con esquinas rectas y se etiqueta con un nombre descriptivo. Transici\u00f3n: Una transici\u00f3n es una relaci\u00f3n que describe el flujo de control entre dos actividades o acciones. Se representa mediante una flecha dirigida desde la actividad o acci\u00f3n de origen a la actividad o acci\u00f3n de destino y se etiqueta con una condici\u00f3n que debe cumplirse para que se produzca la transici\u00f3n. Decisi\u00f3n: Una decisi\u00f3n es un punto en el diagrama de actividades donde se toma una decisi\u00f3n basada en una condici\u00f3n. Se representa mediante un rombo y se etiqueta con la condici\u00f3n que debe cumplirse para que se tome una u otra ruta. Actividad inicial y final: La actividad inicial representa el punto de inicio del diagrama de actividades y se representa mediante un c\u00edrculo negro. La actividad final representa el punto de finalizaci\u00f3n del diagrama de actividades y se representa mediante un c\u00edrculo redondeado. Partici\u00f3n: La partici\u00f3n se utiliza para dividir el diagrama de actividades en diferentes secciones o particiones, cada una de las cuales representa una actividad o proceso independiente. Se representa mediante una l\u00ednea vertical discontinua y se etiqueta con el nombre de la partici\u00f3n. Por cada ejemplo de diagrama de actividades que aparece en las diapositivas, realiza su interpretaci\u00f3n. Escribe la descripci\u00f3n con tus palabras.","title":"Digrama De Clases"},{"location":"opt/","text":"Optimizaci\u00f3n \u00bfQu\u00e9 se entiende por hediondez del c\u00f3digo? Pon al menos 5 ejemplos. La hediondez del c\u00f3digo, tambi\u00e9n conocida como \"code smell\" en ingl\u00e9s, se refiere a un conjunto de caracter\u00edsticas del c\u00f3digo fuente que pueden indicar la presencia de problemas en el dise\u00f1o o la implementaci\u00f3n del software. Estas caracter\u00edsticas no son necesariamente errores de programaci\u00f3n, pero pueden dificultar la comprensi\u00f3n, el mantenimiento o la escalabilidad del c\u00f3digo. Aqu\u00ed hay algunos ejemplos comunes de hediondez del c\u00f3digo: C\u00f3digo duplicado: cuando se repiten bloques de c\u00f3digo similares en varias partes del programa, lo que dificulta la correcci\u00f3n y la actualizaci\u00f3n del software. Clases o m\u00e9todos demasiado grandes: cuando las clases o los m\u00e9todos son demasiado extensos y hacen demasiado trabajo, lo que dificulta la comprensi\u00f3n y el mantenimiento del c\u00f3digo. Nombres de variables o funciones confusos: cuando los nombres de las variables o las funciones no son claros o descriptivos, lo que dificulta la comprensi\u00f3n del c\u00f3digo. Dependencias circulares: cuando dos o m\u00e1s clases se llaman entre s\u00ed en un ciclo, lo que dificulta la comprensi\u00f3n y el mantenimiento del software. Comentarios excesivos o inadecuados: cuando se usan demasiados comentarios en el c\u00f3digo o cuando los comentarios no reflejan adecuadamente lo que est\u00e1 sucediendo en el c\u00f3digo, lo que dificulta la comprensi\u00f3n del programa. \u00bfQu\u00e9 tipo de herramienta utilizamos para hacer an\u00e1lisis est\u00e1tico del c\u00f3digo? Para hacer an\u00e1lisis est\u00e1tico del c\u00f3digo se utilizan herramientas llamadas \"an\u00e1lisis est\u00e1tico de c\u00f3digo\" o \"static code analysis\" en ingl\u00e9s. Estas herramientas examinan el c\u00f3digo fuente de un programa sin ejecutarlo y buscan posibles errores, vulnerabilidades, redundancias, violaciones de est\u00e1ndares de codificaci\u00f3n y otros problemas comunes. Existen diversas herramientas de an\u00e1lisis est\u00e1tico de c\u00f3digo disponibles en el mercado, algunas de ellas son gratuitas y de c\u00f3digo abierto, mientras que otras son comerciales. Algunas de las herramientas m\u00e1s populares son: SonarQube Checkstyle PMD ESLint Code Climate ReSharper Coverity Infer FindBugs Lint \u00bfQu\u00e9 sitios web nos permiten hacer an\u00e1lisis est\u00e1tico del c\u00f3digo o Continuous Inspection ? SonarCloud: Es una plataforma gratuita de an\u00e1lisis est\u00e1tico de c\u00f3digo basada en la nube que admite varios lenguajes de programaci\u00f3n, incluyendo Java, JavaScript, C#, C/C++, Python y m\u00e1s. Ofrece an\u00e1lisis continuo del c\u00f3digo y proporciona informes detallados sobre la calidad del c\u00f3digo, la seguridad y la cobertura de pruebas. CodeClimate: Ofrece an\u00e1lisis continuo del c\u00f3digo para m\u00faltiples lenguajes de programaci\u00f3n, incluyendo Ruby, Python, JavaScript, PHP, Java y TypeScript. Proporciona informes detallados sobre la calidad del c\u00f3digo, la seguridad, la cobertura de pruebas y el rendimiento. Codacy: Es una plataforma de an\u00e1lisis est\u00e1tico de c\u00f3digo que admite m\u00e1s de 30 lenguajes de programaci\u00f3n. Proporciona an\u00e1lisis continuo del c\u00f3digo, integraci\u00f3n con sistemas de control de versiones y herramientas de colaboraci\u00f3n. BetterCodeHub: Es una herramienta de an\u00e1lisis est\u00e1tico de c\u00f3digo que se enfoca en la aplicaci\u00f3n de los principios del \"12 Factor App\" para mejorar la calidad del c\u00f3digo. Proporciona informes detallados sobre la calidad del c\u00f3digo, la arquitectura, el dise\u00f1o y las mejores pr\u00e1cticas. DeepCode: Es una herramienta de an\u00e1lisis est\u00e1tico de c\u00f3digo basada en la inteligencia artificial que ofrece an\u00e1lisis continuo del c\u00f3digo para m\u00faltiples lenguajes de programaci\u00f3n. Proporciona informes detallados sobre la calidad del c\u00f3digo, la seguridad y las mejores pr\u00e1cticas. Instala en Netbeans el plugin FindBugs , si no lo tienes a\u00fan instalado. Realiza an\u00e1lisis est\u00e1tico de c\u00f3digo para las clases del proyecto miapp . Consulta el siguiente enlace: Indica al menos un code smell relevante de cada clase. Explica c\u00f3mo podr\u00eda solucionarse. An\u00e1lisis din\u00e1mico: unit tests An\u00e1lisis est\u00e1tico: lint \u00bfQu\u00e9 es la refactorizaci\u00f3n? Es el proceso de reestructurar un c\u00f3digo fuente, alterando su estructura interna sin cambiar su comportamiento externo. \u00bfQu\u00e9 t\u00e9cnicas se utilizan a menudo a la hora de refactorizar? T\u00e9cnicas: Renombrado de variables Pasar c\u00f3digo duplicado a funciones Eliminaci\u00f3n de c\u00f3digo inalcanzable Eliminaci\u00f3n de c\u00f3digo redundante Eliminaci\u00f3n de c\u00f3digo muerto","title":"Optimizacion"}]}